train_data = torchvision.datasets.CelebA(root = "/content", split = "train",target_type='identity', download = True, transform = transforms.Compose([transforms.Resize((220, 220)), transforms.PILToTensor(), transforms.ConvertImageDtype(dtype = torch.float32)]))
test_data = torchvision.datasets.CelebA(root = "/content", split = "valid",target_type='identity', download = True, transform = transforms.Compose([transforms.Resize((220, 220)), transforms.PILToTensor(), transforms.ConvertImageDtype(dtype = torch.float32)]))
train_batch_sampler = BalancedBatchSampler(train_data, n_classes=10, n_samples=25)
test_batch_sampler = BalancedBatchSampler(test_data, n_classes=10, n_samples=25)

kwargs = {'num_workers': 2, 'pin_memory': True} if cuda else {}
train_loader = DataLoader(train_data, batch_sampler=train_batch_sampler, **kwargs)
test_loader = torch.utils.data.DataLoader(test_data, batch_sampler=test_batch_sampler, **kwargs)


model = NN1()
if cuda:
    model.cuda()
optimizer = optim.Adagrad(model.parameters(), lr = 0.003 )
scheduler = lr_scheduler.StepLR(optimizer, 8, gamma=0.1, last_epoch=-1)
n_epochs = 20
log_interval = 50
fit(train_loader, test_loader, model, optimizer, scheduler, n_epochs, cuda, log_interval, metrics=[AverageNonzeroTripletsMetric()])
